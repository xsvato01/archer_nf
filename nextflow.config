k8s {
   namespace = 'medgen-ns'
   runAsUser = 1000
   storageClaimName = 'pvc-janlambshare-storage-elixir1-cerit-sc-cz'
   storageMountPath = '/mnt'
   homeDir = '/mnt/home/450402/000000-My_Documents/archer_run'
   launchDir = "${k8s.homeDir}/launch"
   projectDir = "${k8s.homeDir}/project"
   workDir = "${k8s.homeDir}/temp"
}

params {
   outDirectory = '/mnt/home/450402/000000-My_Documents/archer_run/launch'
   projectDirectory = "${k8s.projectDir}/xsvato01/archer_nf"
   ref = '/mnt/shared/MedGen/references/Homo_sapiens/GRCh37-p13/seq/GRCh37-p13'
   vep = '/mnt/shared/MedGen/references/Homo_sapiens/GRCh37-p13/VEP'
   refindex = '/mnt/shared/MedGen/references/Homo_sapiens/GRCh37-p13/index/BWA/GRCh37-p13'
   picard = "${k8s.projectDir}/xsvato01/archer_nf/bin/picard.jar"
   ivl = "${k8s.projectDir}/xsvato01/archer_nf/beds/jana_archer_unique_plus2nt.intervals"
   bed = "${k8s.projectDir}/xsvato01/archer_nf/beds/jana_archer_unique_plus2nt.bed"
   vcf2csv = "${k8s.projectDir}/xsvato01/archer_nf/scripts/vcf2table_MDS.py"
   covscript = "${k8s.projectDir}/xsvato01/archer_nf/scripts/coverage_stat_jana.R"
   mergescript = "${k8s.projectDir}/xsvato01/archer_nf/scripts/merge_tables.R"

   flt3tar = "${k8s.projectDir}/xsvato01/archer_nf/bin/FLT3.tar.gz"
   fgbio = "${k8s.projectDir}/xsvato01/archer_nf/bin/fgbio-0.8.1.jar"
}

executor {
   queueSize = 50
}

process {
   container = 'registry.gitlab.ics.muni.cz:443/450402/archer_nf:1'
   shell = ['/bin/bash', '-eo', 'pipefail']
   scratch = true
   executor = 'k8s'
   pod = [[imagePullSecret:'gitlab-svaton-secret'], [securityContext:[fsGroupChangePolicy:'OnRootMismatch', allowPrivilegeEscalation:false, runAsUser:1000, runAsGroup:1, fsGroup:1, capabilities:[drop:['ALL']]]], [nodeSelector:'storage=local-ssd']]
   errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish' }
   maxRetries = 3
   cpus = 1
   memory = '1GB'

   withLabel: xxs_mem {
      memory = {100.MB * task.attempt * (3/4)}
   }
   withLabel: xs_mem {
      memory = {500.MB * task.attempt * (3/4)}
   }
   withLabel: s_mem {
      memory = {1.GB * task.attempt * (3/4)}
   }
   withLabel: m_mem {
      memory = {4.GB * task.attempt * (3/4)}
   }
   withLabel: l_mem {
      memory = {12.GB * task.attempt * (3/4)}
   }     
   withLabel: xl_mem {
      memory = {64.GB * task.attempt * (3/4)}
   }
   withLabel: s_cpu {
      cpus = 1
   }
   withLabel: m_cpu {
      cpus = 4
   }
   withLabel: l_cpu {
      cpus = 8
   }
}
